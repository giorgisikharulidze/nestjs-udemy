    ### Variables
@baseUrl = http://localhost:8000
@contentType= application/json

# The basic request
{{baseUrl}}


### Get all tasks
# @name getAllTasks
GET {{baseUrl}}/tasks?limit=2&offset=2
Authorization: Bearer {{accessToken}}



### Get all in progress tasks
# @name getAllInProgressTasks
GET {{baseUrl}}/tasks?status=IN_PROGRESS
Authorization: Bearer {{accessToken}}


### Get all with search query 
# @name getAllWithSearch
GET {{baseUrl}}/tasks?search=tho
Authorization: Bearer {{accessToken}}


### Get all filtered by labels 
# @name getAllFilteredByLabels
GET {{baseUrl}}/tasks?labels=urgent
Authorization: Bearer {{accessToken}}


### Get all sorted
# @name getAllSorted
GET {{baseUrl}}/tasks?sortBy=title&sortOrder=ASC&limit=100
Authorization: Bearer {{accessToken}}



### Get one tasks
GET {{baseUrl}}/tasks/{{taskId}}
Authorization: Bearer {{accessToken}}



###Create new task
# @name createTask
POST {{baseUrl}}/tasks
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
    "title" : "ALearn 123",
    "description": "Complete the NestJS Course",
    "status": "OPEN",
    "userId": "42ccff11-d170-4650-b5d4-7085a2f8a378",
    "labels": [
        {
            "name": "urgent"
        }
    ]    
}
### set the task id
@taskId = {{createTask.response.body.id}}

### Validation error - status is incorrect

POST {{baseUrl}}/tasks
Content-Type: {{contentType}} 
Authorization: Bearer {{accessToken}}

{
    "title" : "ALearn NestJS",
    "description": "Complete the NestJS Course",
    "status": "XXXOPEN",
    "userId": "42ccff11-d170-4650-b5d4-7085a2f8a378",
    "labels": [
        {
            "name": "urgent"
        }
    ]

}



###Update new task

PATCH {{baseUrl}}/tasks/{{taskId}}
Content-Type: {{contentType}} 
Authorization: Bearer {{accessToken}}

{   "title" : "Learn NestJS",
    "description": "Complete the NestJS Course",
    "status": "IN_PROGRESS",
    "labels":[{
        "name": "done"
    }
    ]
}




### Deleting a task

DELETE {{baseUrl}}/tasks/{{taskId}}



### add specific labels to task
# @name addLabels
POST {{baseUrl}}/tasks/{{taskId}}/labels
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

[
    {"name": "prioritized"},
    {"name": "bug"}
]


### Deleting a task
# @name removeLabels
DELETE {{baseUrl}}/tasks/{{taskId}}/labels
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

["prioritized","bug"]



### Get All Properties
# @name getProperties
GET {{baseUrl}}/property?limit=20&offset=0
Authorization: Bearer {{accessToken}}


### Get one property
# @name getOneProperty
GET {{baseUrl}}/property/{{propertyId}}
Authorization: Bearer {{accessToken}}


### Create property
# @name createProperty
POST {{baseUrl}}/property
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
    "name": "House 20",
    "type": "REAL_ESTATE",
    "userId": "42ccff11-d170-4650-b5d4-7085a2f8a378",
    "propertyDetails": {
        "make": "subaru",
        "model": "crostreck XV"
    }
}
### set the property id
@propertyId = {{createProperty.response.body.id}}


### Delete property
# @name deleteProperty
DELETE {{baseUrl}}/property/{{propertyId}}
Authorization: Bearer {{accessToken}}

### Update property
# @name updateProperty
PATCH {{baseUrl}}/property/{{propertyId}}
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

{
 "name": "House 3",
 "type": "REAL_ESTATE"
}


### Create User
# @name createUser
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

 {
    "email": "gsikharulidze@example.com",
    "password": "1qaz!QAZ",
    "name": "Giorgi Sikharulidze"
}


### User Login
# @name userLogin
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

 {
    "email": "gsikharulidze@example.com",
    "password": "1qaz!QAZ"
}
### set the accessToken
@accessToken = {{userLogin.response.body.accessToken}}



### User Profile
# @name userProfile
GET {{baseUrl}}/auth/profile
Content-Type: {{contentType}}
Authorization: Bearer {{accessToken}}

